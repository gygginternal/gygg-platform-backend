{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":9,"numPassedTests":213,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":9,"numTotalTests":213,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1750531658160,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["Contract API","GET /api/v1/contracts/my-contracts"],"duration":588,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/my-contracts should get contracts for provider","invocations":1,"location":{"column":5,"line":40},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get contracts for provider"},{"ancestorTitles":["Contract API","GET /api/v1/contracts/my-contracts"],"duration":498,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/my-contracts should get contracts for tasker","invocations":1,"location":{"column":5,"line":50},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get contracts for tasker"},{"ancestorTitles":["Contract API","GET /api/v1/contracts/my-contracts"],"duration":483,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/my-contracts should return 401 without authentication","invocations":1,"location":{"column":5,"line":60},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","GET /api/v1/contracts"],"duration":478,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts should get contract by gig ID","invocations":1,"location":{"column":5,"line":67},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get contract by gig ID"},{"ancestorTitles":["Contract API","GET /api/v1/contracts"],"duration":473,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts should return 400 for missing gig ID","invocations":1,"location":{"column":5,"line":77},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing gig ID"},{"ancestorTitles":["Contract API","GET /api/v1/contracts"],"duration":463,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts should return 401 without authentication","invocations":1,"location":{"column":5,"line":86},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","GET /api/v1/contracts/:id"],"duration":494,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/:id should get a specific contract","invocations":1,"location":{"column":5,"line":93},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get a specific contract"},{"ancestorTitles":["Contract API","GET /api/v1/contracts/:id"],"duration":462,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/:id should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":103},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","GET /api/v1/contracts/:id"],"duration":461,"failureDetails":[],"failureMessages":[],"fullName":"Contract API GET /api/v1/contracts/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":112},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/submit-work"],"duration":472,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/submit-work should submit work successfully","invocations":1,"location":{"column":5,"line":119},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should submit work successfully"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/submit-work"],"duration":478,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/submit-work should return 403 for non-tasker users","invocations":1,"location":{"column":5,"line":128},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-tasker users"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/submit-work"],"duration":465,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/submit-work should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":136},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/submit-work"],"duration":466,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/submit-work should return 401 without authentication","invocations":1,"location":{"column":5,"line":145},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/approve-completion"],"duration":487,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/approve-completion should approve completion successfully","invocations":1,"location":{"column":5,"line":152},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should approve completion successfully"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/approve-completion"],"duration":465,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/approve-completion should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":180},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/approve-completion"],"duration":507,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/approve-completion should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":188},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/approve-completion"],"duration":472,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/approve-completion should return 401 without authentication","invocations":1,"location":{"column":5,"line":197},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/request-revision"],"duration":495,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/request-revision should request revision successfully","invocations":1,"location":{"column":5,"line":204},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should request revision successfully"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/request-revision"],"duration":560,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/request-revision should return 400 for missing reason","invocations":1,"location":{"column":5,"line":220},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing reason"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/request-revision"],"duration":494,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/request-revision should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":233},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/request-revision"],"duration":502,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/request-revision should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":242},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/request-revision"],"duration":479,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/request-revision should return 401 without authentication","invocations":1,"location":{"column":5,"line":252},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/cancel"],"duration":521,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/cancel should cancel contract successfully","invocations":1,"location":{"column":5,"line":262},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cancel contract successfully"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/cancel"],"duration":501,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/cancel should cancel contract without reason","invocations":1,"location":{"column":5,"line":276},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cancel contract without reason"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/cancel"],"duration":480,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/cancel should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":285},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","PATCH /api/v1/contracts/:id/cancel"],"duration":476,"failureDetails":[],"failureMessages":[],"fullName":"Contract API PATCH /api/v1/contracts/:id/cancel should return 401 without authentication","invocations":1,"location":{"column":5,"line":295},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Contract API","DELETE /api/v1/contracts/:id"],"duration":491,"failureDetails":[],"failureMessages":[],"fullName":"Contract API DELETE /api/v1/contracts/:id should not allow provider to delete contract with assigned tasker","invocations":1,"location":{"column":5,"line":305},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not allow provider to delete contract with assigned tasker"},{"ancestorTitles":["Contract API","DELETE /api/v1/contracts/:id"],"duration":476,"failureDetails":[],"failureMessages":[],"fullName":"Contract API DELETE /api/v1/contracts/:id should not allow tasker to delete contract with assigned tasker","invocations":1,"location":{"column":5,"line":315},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not allow tasker to delete contract with assigned tasker"},{"ancestorTitles":["Contract API","DELETE /api/v1/contracts/:id"],"duration":1201,"failureDetails":[],"failureMessages":[],"fullName":"Contract API DELETE /api/v1/contracts/:id should allow admin to delete contract with assigned tasker","invocations":1,"location":{"column":5,"line":325},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow admin to delete contract with assigned tasker"},{"ancestorTitles":["Contract API","DELETE /api/v1/contracts/:id"],"duration":803,"failureDetails":[],"failureMessages":[],"fullName":"Contract API DELETE /api/v1/contracts/:id should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":342},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Contract API","DELETE /api/v1/contracts/:id"],"duration":809,"failureDetails":[],"failureMessages":[],"fullName":"Contract API DELETE /api/v1/contracts/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":351},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"}],"endTime":1750531677268,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\contract.test.js","startTime":1750531658194,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":975,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should get all reviews with authentication","invocations":1,"location":{"column":5,"line":48},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all reviews with authentication"},{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":828,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should return 401 without authentication","invocations":1,"location":{"column":5,"line":58},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":844,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should filter by gig ID","invocations":1,"location":{"column":5,"line":63},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by gig ID"},{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":928,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should filter by tasker ID","invocations":1,"location":{"column":5,"line":72},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by tasker ID"},{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":881,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should filter by provider ID","invocations":1,"location":{"column":5,"line":81},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by provider ID"},{"ancestorTitles":["Review API","GET /api/v1/reviews"],"duration":812,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews should support pagination","invocations":1,"location":{"column":5,"line":90},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support pagination"},{"ancestorTitles":["Review API","POST /api/v1/reviews"],"duration":826,"failureDetails":[],"failureMessages":[],"fullName":"Review API POST /api/v1/reviews should create a new review successfully","invocations":1,"location":{"column":5,"line":101},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new review successfully"},{"ancestorTitles":["Review API","POST /api/v1/reviews"],"duration":803,"failureDetails":[],"failureMessages":[],"fullName":"Review API POST /api/v1/reviews should return 400 for missing required fields","invocations":1,"location":{"column":5,"line":132},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing required fields"},{"ancestorTitles":["Review API","POST /api/v1/reviews"],"duration":872,"failureDetails":[],"failureMessages":[],"fullName":"Review API POST /api/v1/reviews should return 400 for invalid rating","invocations":1,"location":{"column":5,"line":142},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid rating"},{"ancestorTitles":["Review API","POST /api/v1/reviews"],"duration":810,"failureDetails":[],"failureMessages":[],"fullName":"Review API POST /api/v1/reviews should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":156},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Review API","POST /api/v1/reviews"],"duration":849,"failureDetails":[],"failureMessages":[],"fullName":"Review API POST /api/v1/reviews should return 401 without authentication","invocations":1,"location":{"column":5,"line":169},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Review API","GET /api/v1/reviews/:id"],"duration":828,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/:id should get a specific review","invocations":1,"location":{"column":5,"line":183},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get a specific review"},{"ancestorTitles":["Review API","GET /api/v1/reviews/:id"],"duration":804,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/:id should return 404 for non-existent review","invocations":1,"location":{"column":5,"line":193},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent review"},{"ancestorTitles":["Review API","GET /api/v1/reviews/:id"],"duration":798,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":202},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":813,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should update a review successfully","invocations":1,"location":{"column":5,"line":209},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update a review successfully"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":797,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should return 400 for invalid rating","invocations":1,"location":{"column":5,"line":225},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid rating"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":802,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should return 400 for trying to change contract ID","invocations":1,"location":{"column":5,"line":235},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for trying to change contract ID"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":796,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":245},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":807,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should return 404 for non-existent review","invocations":1,"location":{"column":5,"line":254},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent review"},{"ancestorTitles":["Review API","PATCH /api/v1/reviews/:id"],"duration":800,"failureDetails":[],"failureMessages":[],"fullName":"Review API PATCH /api/v1/reviews/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":264},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Review API","DELETE /api/v1/reviews/:id"],"duration":846,"failureDetails":[],"failureMessages":[],"fullName":"Review API DELETE /api/v1/reviews/:id should delete a review successfully","invocations":1,"location":{"column":5,"line":274},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete a review successfully"},{"ancestorTitles":["Review API","DELETE /api/v1/reviews/:id"],"duration":820,"failureDetails":[],"failureMessages":[],"fullName":"Review API DELETE /api/v1/reviews/:id should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":282},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Review API","DELETE /api/v1/reviews/:id"],"duration":794,"failureDetails":[],"failureMessages":[],"fullName":"Review API DELETE /api/v1/reviews/:id should return 404 for non-existent review","invocations":1,"location":{"column":5,"line":290},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent review"},{"ancestorTitles":["Review API","DELETE /api/v1/reviews/:id"],"duration":794,"failureDetails":[],"failureMessages":[],"fullName":"Review API DELETE /api/v1/reviews/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":299},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Review API","GET /api/v1/reviews/user/:userId"],"duration":836,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/user/:userId should get reviews for a specific user","invocations":1,"location":{"column":5,"line":306},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get reviews for a specific user"},{"ancestorTitles":["Review API","GET /api/v1/reviews/user/:userId"],"duration":807,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/user/:userId should return 400 for invalid user ID","invocations":1,"location":{"column":5,"line":338},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for invalid user ID"},{"ancestorTitles":["Review API","GET /api/v1/reviews/average/:userId"],"duration":802,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/average/:userId should get average rating for a user","invocations":1,"location":{"column":5,"line":347},"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should get average rating for a user"},{"ancestorTitles":["Review API","GET /api/v1/reviews/average/:userId"],"duration":815,"failureDetails":[],"failureMessages":[],"fullName":"Review API GET /api/v1/reviews/average/:userId should return 400 for invalid user ID","invocations":1,"location":{"column":5,"line":380},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for invalid user ID"}],"endTime":1750531701895,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\review.test.js","startTime":1750531677352,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Gig API","GET /api/v1/gigs"],"duration":921,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs should get all gigs with authentication","invocations":1,"location":{"column":5,"line":29},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all gigs with authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs"],"duration":790,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs should return 401 without authentication","invocations":1,"location":{"column":5,"line":39},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs"],"duration":804,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs should support pagination","invocations":1,"location":{"column":5,"line":44},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support pagination"},{"ancestorTitles":["Gig API","GET /api/v1/gigs"],"duration":805,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs should filter by category","invocations":1,"location":{"column":5,"line":53},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by category"},{"ancestorTitles":["Gig API","GET /api/v1/gigs"],"duration":799,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs should filter by status","invocations":1,"location":{"column":5,"line":62},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter by status"},{"ancestorTitles":["Gig API","POST /api/v1/gigs"],"duration":792,"failureDetails":[],"failureMessages":[],"fullName":"Gig API POST /api/v1/gigs should create a new gig successfully","invocations":1,"location":{"column":5,"line":73},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new gig successfully"},{"ancestorTitles":["Gig API","POST /api/v1/gigs"],"duration":782,"failureDetails":[],"failureMessages":[],"fullName":"Gig API POST /api/v1/gigs should return 400 for missing required fields","invocations":1,"location":{"column":5,"line":100},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing required fields"},{"ancestorTitles":["Gig API","POST /api/v1/gigs"],"duration":790,"failureDetails":[],"failureMessages":[],"fullName":"Gig API POST /api/v1/gigs should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":110},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Gig API","POST /api/v1/gigs"],"duration":794,"failureDetails":[],"failureMessages":[],"fullName":"Gig API POST /api/v1/gigs should return 401 without authentication","invocations":1,"location":{"column":5,"line":119},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:id"],"duration":793,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:id should get a specific gig","invocations":1,"location":{"column":5,"line":129},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get a specific gig"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:id"],"duration":837,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:id should return 404 for non-existent gig","invocations":1,"location":{"column":5,"line":139},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent gig"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:id"],"duration":812,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":148},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","PATCH /api/v1/gigs/:id"],"duration":817,"failureDetails":[],"failureMessages":[],"fullName":"Gig API PATCH /api/v1/gigs/:id should update a gig successfully","invocations":1,"location":{"column":5,"line":155},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update a gig successfully"},{"ancestorTitles":["Gig API","PATCH /api/v1/gigs/:id"],"duration":793,"failureDetails":[],"failureMessages":[],"fullName":"Gig API PATCH /api/v1/gigs/:id should return 404 for non-existent gig","invocations":1,"location":{"column":5,"line":171},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent gig"},{"ancestorTitles":["Gig API","PATCH /api/v1/gigs/:id"],"duration":781,"failureDetails":[],"failureMessages":[],"fullName":"Gig API PATCH /api/v1/gigs/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":181},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","DELETE /api/v1/gigs/:id"],"duration":814,"failureDetails":[],"failureMessages":[],"fullName":"Gig API DELETE /api/v1/gigs/:id should delete a gig successfully","invocations":1,"location":{"column":5,"line":191},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete a gig successfully"},{"ancestorTitles":["Gig API","DELETE /api/v1/gigs/:id"],"duration":809,"failureDetails":[],"failureMessages":[],"fullName":"Gig API DELETE /api/v1/gigs/:id should return 404 for non-existent gig","invocations":1,"location":{"column":5,"line":199},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent gig"},{"ancestorTitles":["Gig API","DELETE /api/v1/gigs/:id"],"duration":786,"failureDetails":[],"failureMessages":[],"fullName":"Gig API DELETE /api/v1/gigs/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":208},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/top-match"],"duration":802,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/top-match should get top matching gigs for tasker","invocations":1,"location":{"column":5,"line":215},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get top matching gigs for tasker"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/top-match"],"duration":794,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/top-match should return 401 without authentication","invocations":1,"location":{"column":5,"line":224},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/awaiting-posted-gig"],"duration":791,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/awaiting-posted-gig should get gigs with no applications for provider","invocations":1,"location":{"column":5,"line":231},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get gigs with no applications for provider"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/awaiting-posted-gig"],"duration":789,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/awaiting-posted-gig should return 403 for non-provider users","invocations":1,"location":{"column":5,"line":240},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 for non-provider users"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/awaiting-posted-gig"],"duration":792,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/awaiting-posted-gig should return 401 without authentication","invocations":1,"location":{"column":5,"line":248},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:gigId/offer"],"duration":796,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:gigId/offer should get offer for a specific gig","invocations":1,"location":{"column":5,"line":255},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get offer for a specific gig"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:gigId/offer"],"duration":790,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:gigId/offer should return 404 for non-existent gig","invocations":1,"location":{"column":5,"line":264},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent gig"},{"ancestorTitles":["Gig API","GET /api/v1/gigs/:gigId/offer"],"duration":791,"failureDetails":[],"failureMessages":[],"fullName":"Gig API GET /api/v1/gigs/:gigId/offer should return 401 without authentication","invocations":1,"location":{"column":5,"line":273},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"}],"endTime":1750531724151,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\gig.test.js","startTime":1750531701938,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Post API","GET /api/v1/posts"],"duration":494,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts should get all posts with authentication","invocations":1,"location":{"column":5,"line":25},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all posts with authentication"},{"ancestorTitles":["Post API","GET /api/v1/posts"],"duration":414,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts should return 401 without authentication","invocations":1,"location":{"column":5,"line":35},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","GET /api/v1/posts"],"duration":405,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts should support pagination","invocations":1,"location":{"column":5,"line":40},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support pagination"},{"ancestorTitles":["Post API","GET /api/v1/posts"],"duration":419,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts should support sorting","invocations":1,"location":{"column":5,"line":49},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support sorting"},{"ancestorTitles":["Post API","GET /api/v1/posts"],"duration":405,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts should support location-based filtering","invocations":1,"location":{"column":5,"line":58},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support location-based filtering"},{"ancestorTitles":["Post API","POST /api/v1/posts"],"duration":413,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts should create a new post successfully","invocations":1,"location":{"column":5,"line":69},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create a new post successfully"},{"ancestorTitles":["Post API","POST /api/v1/posts"],"duration":701,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts should create a post with image upload","invocations":1,"location":{"column":5,"line":84},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a post with image upload"},{"ancestorTitles":["Post API","POST /api/v1/posts"],"duration":409,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts should return 400 for missing content","invocations":1,"location":{"column":5,"line":95},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing content"},{"ancestorTitles":["Post API","POST /api/v1/posts"],"duration":394,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts should return 401 without authentication","invocations":1,"location":{"column":5,"line":104},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","GET /api/v1/posts/:id"],"duration":406,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/:id should get a specific post","invocations":1,"location":{"column":5,"line":114},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get a specific post"},{"ancestorTitles":["Post API","GET /api/v1/posts/:id"],"duration":406,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/:id should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":124},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","GET /api/v1/posts/:id"],"duration":408,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":133},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id"],"duration":424,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id should update a post successfully","invocations":1,"location":{"column":5,"line":140},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update a post successfully"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id"],"duration":414,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":155},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id"],"duration":400,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":165},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id"],"duration":777,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id should return 403 when trying to update another user's post","invocations":1,"location":{"column":5,"line":173},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 when trying to update another user's post"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:id"],"duration":397,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:id should delete a post successfully","invocations":1,"location":{"column":5,"line":191},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete a post successfully"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:id"],"duration":414,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:id should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":199},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:id"],"duration":390,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":208},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:id"],"duration":742,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:id should return 403 when trying to delete another user's post","invocations":1,"location":{"column":5,"line":213},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 403 when trying to delete another user's post"},{"ancestorTitles":["Post API","GET /api/v1/posts/user/:userId"],"duration":414,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/user/:userId should get posts by user ID","invocations":1,"location":{"column":5,"line":230},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get posts by user ID"},{"ancestorTitles":["Post API","GET /api/v1/posts/user/:userId"],"duration":390,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/user/:userId should support pagination for user posts","invocations":1,"location":{"column":5,"line":240},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support pagination for user posts"},{"ancestorTitles":["Post API","GET /api/v1/posts/user/:userId"],"duration":375,"failureDetails":[],"failureMessages":[],"fullName":"Post API GET /api/v1/posts/user/:userId should return 401 without authentication","invocations":1,"location":{"column":5,"line":249},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/like"],"duration":447,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/like should like a post successfully","invocations":1,"location":{"column":5,"line":256},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should like a post successfully"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/like"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/like should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":265},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/like"],"duration":395,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/like should return 401 without authentication","invocations":1,"location":{"column":5,"line":274},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/unlike"],"duration":417,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/unlike should unlike a post successfully","invocations":1,"location":{"column":5,"line":281},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should unlike a post successfully"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/unlike"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/unlike should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":296},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","PATCH /api/v1/posts/:id/unlike"],"duration":405,"failureDetails":[],"failureMessages":[],"fullName":"Post API PATCH /api/v1/posts/:id/unlike should return 401 without authentication","invocations":1,"location":{"column":5,"line":305},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","POST /api/v1/posts/:id/comments"],"duration":408,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts/:id/comments should add a comment to a post successfully","invocations":1,"location":{"column":5,"line":312},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add a comment to a post successfully"},{"ancestorTitles":["Post API","POST /api/v1/posts/:id/comments"],"duration":403,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts/:id/comments should return 400 for missing comment text","invocations":1,"location":{"column":5,"line":326},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing comment text"},{"ancestorTitles":["Post API","POST /api/v1/posts/:id/comments"],"duration":421,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts/:id/comments should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":336},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","POST /api/v1/posts/:id/comments"],"duration":390,"failureDetails":[],"failureMessages":[],"fullName":"Post API POST /api/v1/posts/:id/comments should return 401 without authentication","invocations":1,"location":{"column":5,"line":346},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:postId/comments/:commentId"],"duration":452,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:postId/comments/:commentId should delete a comment successfully","invocations":1,"location":{"column":5,"line":356},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete a comment successfully"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:postId/comments/:commentId"],"duration":401,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:postId/comments/:commentId should return 404 for non-existent post","invocations":1,"location":{"column":5,"line":376},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent post"},{"ancestorTitles":["Post API","DELETE /api/v1/posts/:postId/comments/:commentId"],"duration":419,"failureDetails":[],"failureMessages":[],"fullName":"Post API DELETE /api/v1/posts/:postId/comments/:commentId should return 401 without authentication","invocations":1,"location":{"column":5,"line":386},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"}],"endTime":1750531741344,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\post.test.js","startTime":1750531724203,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Chat API","GET /api/v1/chat/conversations"],"duration":978,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/conversations should get chat conversations for authenticated user","invocations":1,"location":{"column":5,"line":46},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get chat conversations for authenticated user"},{"ancestorTitles":["Chat API","GET /api/v1/chat/conversations"],"duration":804,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/conversations should return 401 without authentication","invocations":1,"location":{"column":5,"line":55},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Chat API","GET /api/v1/chat/unread-count"],"duration":792,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/unread-count should get unread message count for authenticated user","invocations":1,"location":{"column":5,"line":62},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get unread message count for authenticated user"},{"ancestorTitles":["Chat API","GET /api/v1/chat/unread-count"],"duration":792,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/unread-count should return 401 without authentication","invocations":1,"location":{"column":5,"line":71},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Chat API","GET /api/v1/chat/history/:contractId"],"duration":797,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/history/:contractId should get chat history for a specific contract","invocations":1,"location":{"column":5,"line":78},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get chat history for a specific contract"},{"ancestorTitles":["Chat API","GET /api/v1/chat/history/:contractId"],"duration":680,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/history/:contractId should return 401 without authentication","invocations":1,"location":{"column":5,"line":87},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Chat API","GET /api/v1/chat/history/:contractId"],"duration":745,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/history/:contractId should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":92},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send/:contractId"],"duration":821,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send/:contractId should send a message for a specific contract","invocations":1,"location":{"column":5,"line":102},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send a message for a specific contract"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send/:contractId"],"duration":807,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send/:contractId should return 400 for empty message content","invocations":1,"location":{"column":5,"line":117},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for empty message content"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send/:contractId"],"duration":869,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send/:contractId should return 401 without authentication","invocations":1,"location":{"column":5,"line":131},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send/:contractId"],"duration":784,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send/:contractId should return 404 for non-existent contract","invocations":1,"location":{"column":5,"line":139},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent contract"},{"ancestorTitles":["Chat API","POST /api/v1/chat/upload"],"duration":809,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/upload should upload a chat image successfully","invocations":1,"location":{"column":5,"line":151},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should upload a chat image successfully"},{"ancestorTitles":["Chat API","POST /api/v1/chat/upload"],"duration":762,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/upload should return 400 for no file uploaded","invocations":1,"location":{"column":5,"line":162},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for no file uploaded"},{"ancestorTitles":["Chat API","POST /api/v1/chat/upload"],"duration":742,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/upload should return 401 without authentication","invocations":1,"location":{"column":5,"line":170},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send (direct message, no contract)"],"duration":773,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send (direct message, no contract) should allow provider to message tasker directly","invocations":1,"location":{"column":5,"line":177},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow provider to message tasker directly"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send (direct message, no contract)"],"duration":801,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send (direct message, no contract) should allow tasker to message provider directly","invocations":1,"location":{"column":5,"line":192},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should allow tasker to message provider directly"},{"ancestorTitles":["Chat API","POST /api/v1/chat/send (direct message, no contract)"],"duration":769,"failureDetails":[],"failureMessages":[],"fullName":"Chat API POST /api/v1/chat/send (direct message, no contract) should return 400 if receiverId is missing for direct message","invocations":1,"location":{"column":5,"line":207},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if receiverId is missing for direct message"},{"ancestorTitles":["Chat API","GET /api/v1/chat/history (direct message, no contract)"],"duration":806,"failureDetails":[],"failureMessages":[],"fullName":"Chat API GET /api/v1/chat/history (direct message, no contract) should get direct message history between provider and tasker","invocations":1,"location":{"column":5,"line":221},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get direct message history between provider and tasker"}],"endTime":1750531757109,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\chat.test.js","startTime":1750531741394,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["User Management API","GET /api/v1/users/me"],"duration":480,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/me should get current user profile","invocations":1,"location":{"column":5,"line":15},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get current user profile"},{"ancestorTitles":["User Management API","GET /api/v1/users/me"],"duration":439,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/me should get current user profile when authenticated","invocations":1,"location":{"column":5,"line":20},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get current user profile when authenticated"},{"ancestorTitles":["User Management API","PATCH /api/v1/users/updateMe"],"duration":427,"failureDetails":[],"failureMessages":[],"fullName":"User Management API PATCH /api/v1/users/updateMe should update user profile successfully","invocations":1,"location":{"column":5,"line":30},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update user profile successfully"},{"ancestorTitles":["User Management API","PATCH /api/v1/users/updateMe"],"duration":397,"failureDetails":[],"failureMessages":[],"fullName":"User Management API PATCH /api/v1/users/updateMe should return 400 for invalid phone number format","invocations":1,"location":{"column":5,"line":47},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid phone number format"},{"ancestorTitles":["User Management API","PATCH /api/v1/users/updateMe"],"duration":385,"failureDetails":[],"failureMessages":[],"fullName":"User Management API PATCH /api/v1/users/updateMe should return 400 for bio exceeding character limit","invocations":1,"location":{"column":5,"line":59},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for bio exceeding character limit"},{"ancestorTitles":["User Management API","PATCH /api/v1/users/updateMe"],"duration":395,"failureDetails":[],"failureMessages":[],"fullName":"User Management API PATCH /api/v1/users/updateMe should return 400 for password update attempt","invocations":1,"location":{"column":5,"line":72},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for password update attempt"},{"ancestorTitles":["User Management API","PATCH /api/v1/users/updateMe"],"duration":389,"failureDetails":[],"failureMessages":[],"fullName":"User Management API PATCH /api/v1/users/updateMe should return 401 without authentication","invocations":1,"location":{"column":5,"line":84},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["User Management API","DELETE /api/v1/users/deleteMe"],"duration":403,"failureDetails":[],"failureMessages":[],"fullName":"User Management API DELETE /api/v1/users/deleteMe should delete current user account","invocations":1,"location":{"column":5,"line":94},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete current user account"},{"ancestorTitles":["User Management API","DELETE /api/v1/users/deleteMe"],"duration":414,"failureDetails":[],"failureMessages":[],"fullName":"User Management API DELETE /api/v1/users/deleteMe should delete current user account when authenticated","invocations":1,"location":{"column":5,"line":99},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete current user account when authenticated"},{"ancestorTitles":["User Management API","GET /api/v1/users/public/:id"],"duration":436,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/public/:id should get public user profile","invocations":1,"location":{"column":5,"line":108},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get public user profile"},{"ancestorTitles":["User Management API","GET /api/v1/users/public/:id"],"duration":429,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/public/:id should return 400 for invalid user ID format","invocations":1,"location":{"column":5,"line":114},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid user ID format"},{"ancestorTitles":["User Management API","GET /api/v1/users/public/:id"],"duration":477,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/public/:id should return 404 for non-existent user","invocations":1,"location":{"column":5,"line":120},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent user"},{"ancestorTitles":["User Management API","GET /api/v1/users/me/album"],"duration":413,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/me/album should get user album","invocations":1,"location":{"column":5,"line":128},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get user album"},{"ancestorTitles":["User Management API","GET /api/v1/users/me/album"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/me/album should get user album when authenticated","invocations":1,"location":{"column":5,"line":133},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get user album when authenticated"},{"ancestorTitles":["User Management API","POST /api/v1/users/me/album"],"duration":391,"failureDetails":[],"failureMessages":[],"fullName":"User Management API POST /api/v1/users/me/album should upload album photo","invocations":1,"location":{"column":5,"line":143},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should upload album photo"},{"ancestorTitles":["User Management API","DELETE /api/v1/users/me/album/:photoId"],"duration":377,"failureDetails":[],"failureMessages":[],"fullName":"User Management API DELETE /api/v1/users/me/album/:photoId should delete album photo","invocations":1,"location":{"column":5,"line":150},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete album photo"},{"ancestorTitles":["User Management API","GET /api/v1/users/match-taskers"],"duration":391,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/match-taskers should get matching taskers for provider","invocations":1,"location":{"column":5,"line":158},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get matching taskers for provider"},{"ancestorTitles":["User Management API","GET /api/v1/users/match-taskers"],"duration":412,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/match-taskers should get matching taskers when authenticated as provider","invocations":1,"location":{"column":5,"line":163},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get matching taskers when authenticated as provider"},{"ancestorTitles":["User Management API","GET /api/v1/users/top-match-taskers"],"duration":382,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/top-match-taskers should get top matching taskers","invocations":1,"location":{"column":5,"line":173},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get top matching taskers"},{"ancestorTitles":["User Management API","GET /api/v1/users/top-match-taskers"],"duration":438,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/top-match-taskers should get top matching taskers when authenticated as provider","invocations":1,"location":{"column":5,"line":178},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get top matching taskers when authenticated as provider"},{"ancestorTitles":["User Management API","POST /api/v1/users/stripe/connect-account"],"duration":401,"failureDetails":[],"failureMessages":[],"fullName":"User Management API POST /api/v1/users/stripe/connect-account should create Stripe connect account","invocations":1,"location":{"column":5,"line":188},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create Stripe connect account"},{"ancestorTitles":["User Management API","GET /api/v1/users/stripe/account-link"],"duration":417,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/stripe/account-link should get Stripe account link","invocations":1,"location":{"column":5,"line":195},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get Stripe account link"},{"ancestorTitles":["User Management API","GET /api/v1/users/stripe/account-status"],"duration":407,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/stripe/account-status should get Stripe account status","invocations":1,"location":{"column":5,"line":202},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get Stripe account status"},{"ancestorTitles":["User Management API","GET /api/v1/users/:userId/album"],"duration":393,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/:userId/album should get user album by ID","invocations":1,"location":{"column":5,"line":209},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get user album by ID"},{"ancestorTitles":["User Management API","GET /api/v1/users/:userId/album"],"duration":391,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/:userId/album should return 400 for invalid user ID format","invocations":1,"location":{"column":5,"line":217},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid user ID format"},{"ancestorTitles":["User Management API","GET /api/v1/users/:userId/album"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/:userId/album should return 404 for non-existent user","invocations":1,"location":{"column":5,"line":225},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent user"},{"ancestorTitles":["User Management API","GET /api/v1/users/:userId/album"],"duration":390,"failureDetails":[],"failureMessages":[],"fullName":"User Management API GET /api/v1/users/:userId/album should return 401 without authentication","invocations":1,"location":{"column":5,"line":233},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"}],"endTime":1750531769533,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\user.test.js","startTime":1750531757136,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Payments API"],"duration":1267,"failureDetails":[],"failureMessages":[],"fullName":"Payments API should return 401 for unauthenticated access","invocations":1,"location":{"column":3,"line":49},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 for unauthenticated access"},{"ancestorTitles":["Invoice PDF Endpoint"],"duration":1253,"failureDetails":[],"failureMessages":[],"fullName":"Invoice PDF Endpoint should allow provider to download invoice PDF","invocations":1,"location":{"column":3,"line":56},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow provider to download invoice PDF"},{"ancestorTitles":["Invoice PDF Endpoint"],"duration":1221,"failureDetails":[],"failureMessages":[],"fullName":"Invoice PDF Endpoint should allow tasker to download invoice PDF","invocations":1,"location":{"column":3,"line":66},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow tasker to download invoice PDF"},{"ancestorTitles":["Invoice PDF Endpoint"],"duration":1202,"failureDetails":[],"failureMessages":[],"fullName":"Invoice PDF Endpoint should allow admin to download invoice PDF","invocations":1,"location":{"column":3,"line":76},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow admin to download invoice PDF"},{"ancestorTitles":["Invoice PDF Endpoint"],"duration":1597,"failureDetails":[],"failureMessages":[],"fullName":"Invoice PDF Endpoint should not allow unrelated user to download invoice PDF","invocations":1,"location":{"column":3,"line":86},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not allow unrelated user to download invoice PDF"},{"ancestorTitles":["Invoice PDF Endpoint"],"duration":1168,"failureDetails":[],"failureMessages":[],"fullName":"Invoice PDF Endpoint should return 404 for non-existent payment","invocations":1,"location":{"column":3,"line":102},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent payment"}],"endTime":1750531778535,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\payment.test.js","startTime":1750531769589,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":519,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should create a new user successfully","invocations":1,"location":{"column":5,"line":11},"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should create a new user successfully"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for invalid email","invocations":1,"location":{"column":5,"line":24},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid email"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for missing required fields","invocations":1,"location":{"column":5,"line":34},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing required fields"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for short password","invocations":1,"location":{"column":5,"line":43},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for short password"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":797,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for duplicate email","invocations":1,"location":{"column":5,"line":53},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for duplicate email"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for mismatched passwords","invocations":1,"location":{"column":5,"line":68},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for mismatched passwords"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for invalid phone number format","invocations":1,"location":{"column":5,"line":77},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for invalid phone number format"},{"ancestorTitles":["Authentication API","POST /api/v1/users/signup"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/signup should return 400 for invalid date of birth","invocations":1,"location":{"column":5,"line":86},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 for invalid date of birth"},{"ancestorTitles":["Authentication API","POST /api/v1/users/login"],"duration":770,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/login should login successfully with valid credentials","invocations":1,"location":{"column":5,"line":103},"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should login successfully with valid credentials"},{"ancestorTitles":["Authentication API","POST /api/v1/users/login"],"duration":413,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/login should return 400 for missing email","invocations":1,"location":{"column":5,"line":117},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing email"},{"ancestorTitles":["Authentication API","POST /api/v1/users/login"],"duration":757,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/login should return 401 for incorrect password","invocations":1,"location":{"column":5,"line":126},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 401 for incorrect password"},{"ancestorTitles":["Authentication API","POST /api/v1/users/login"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/login should return 401 for non-existent email","invocations":1,"location":{"column":5,"line":138},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 401 for non-existent email"},{"ancestorTitles":["Authentication API","POST /api/v1/users/login"],"duration":1147,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/login should return 401 for unverified email","invocations":1,"location":{"column":5,"line":150},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 401 for unverified email"},{"ancestorTitles":["Authentication API","GET /api/v1/users/verifyEmail/:token"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API GET /api/v1/users/verifyEmail/:token should verify email with valid token","invocations":1,"location":{"column":5,"line":168},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should verify email with valid token"},{"ancestorTitles":["Authentication API","GET /api/v1/users/verifyEmail/:token"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API GET /api/v1/users/verifyEmail/:token should return 400 for invalid token","invocations":1,"location":{"column":5,"line":173},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid token"},{"ancestorTitles":["Authentication API","POST /api/v1/users/forgotPassword"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/forgotPassword should send reset password email","invocations":1,"location":{"column":5,"line":181},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send reset password email"},{"ancestorTitles":["Authentication API","POST /api/v1/users/forgotPassword"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/forgotPassword should return 400 for missing email","invocations":1,"location":{"column":5,"line":190},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for missing email"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/resetPassword/:token"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/resetPassword/:token should reset password with valid token","invocations":1,"location":{"column":5,"line":201},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reset password with valid token"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/resetPassword/:token"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/resetPassword/:token should return 400 for invalid token","invocations":1,"location":{"column":5,"line":212},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for invalid token"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/resetPassword/:token"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/resetPassword/:token should return 400 for mismatched passwords","invocations":1,"location":{"column":5,"line":224},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for mismatched passwords"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/updateMyPassword"],"duration":1153,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/updateMyPassword should update password successfully","invocations":1,"location":{"column":5,"line":238},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update password successfully"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/updateMyPassword"],"duration":788,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/updateMyPassword should return 401 for incorrect current password","invocations":1,"location":{"column":5,"line":255},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 401 for incorrect current password"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/updateMyPassword"],"duration":393,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/updateMyPassword should return 400 for mismatched new passwords","invocations":1,"location":{"column":5,"line":272},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return 400 for mismatched new passwords"},{"ancestorTitles":["Authentication API","PATCH /api/v1/users/updateMyPassword"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API PATCH /api/v1/users/updateMyPassword should return 401 without authentication","invocations":1,"location":{"column":5,"line":289},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Authentication API","GET /api/v1/users/me"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API GET /api/v1/users/me should get current user profile","invocations":1,"location":{"column":5,"line":303},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get current user profile"},{"ancestorTitles":["Authentication API","POST /api/v1/users/logout"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Authentication API POST /api/v1/users/logout should logout successfully","invocations":1,"location":{"column":5,"line":310},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should logout successfully"}],"endTime":1750531787119,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\auth.test.js","startTime":1750531778568,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Notification API","GET /api/v1/notifications"],"duration":475,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications should get all notifications for authenticated user","invocations":1,"location":{"column":5,"line":27},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all notifications for authenticated user"},{"ancestorTitles":["Notification API","GET /api/v1/notifications"],"duration":415,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications should return 401 without authentication","invocations":1,"location":{"column":5,"line":37},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Notification API","GET /api/v1/notifications"],"duration":392,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications should support pagination","invocations":1,"location":{"column":5,"line":42},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should support pagination"},{"ancestorTitles":["Notification API","GET /api/v1/notifications/:id"],"duration":398,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications/:id should get a specific notification","invocations":1,"location":{"column":5,"line":53},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get a specific notification"},{"ancestorTitles":["Notification API","GET /api/v1/notifications/:id"],"duration":400,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications/:id should return 404 for non-existent notification","invocations":1,"location":{"column":5,"line":63},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent notification"},{"ancestorTitles":["Notification API","GET /api/v1/notifications/:id"],"duration":406,"failureDetails":[],"failureMessages":[],"fullName":"Notification API GET /api/v1/notifications/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":72},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Notification API","PATCH /api/v1/notifications/:id/read"],"duration":394,"failureDetails":[],"failureMessages":[],"fullName":"Notification API PATCH /api/v1/notifications/:id/read should mark a notification as read successfully","invocations":1,"location":{"column":5,"line":79},"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should mark a notification as read successfully"},{"ancestorTitles":["Notification API","PATCH /api/v1/notifications/:id/read"],"duration":464,"failureDetails":[],"failureMessages":[],"fullName":"Notification API PATCH /api/v1/notifications/:id/read should return 404 for non-existent notification","invocations":1,"location":{"column":5,"line":89},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent notification"},{"ancestorTitles":["Notification API","PATCH /api/v1/notifications/:id/read"],"duration":396,"failureDetails":[],"failureMessages":[],"fullName":"Notification API PATCH /api/v1/notifications/:id/read should return 401 without authentication","invocations":1,"location":{"column":5,"line":98},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Notification API","DELETE /api/v1/notifications/:id"],"duration":399,"failureDetails":[],"failureMessages":[],"fullName":"Notification API DELETE /api/v1/notifications/:id should delete a notification successfully","invocations":1,"location":{"column":5,"line":105},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete a notification successfully"},{"ancestorTitles":["Notification API","DELETE /api/v1/notifications/:id"],"duration":401,"failureDetails":[],"failureMessages":[],"fullName":"Notification API DELETE /api/v1/notifications/:id should return 404 for non-existent notification","invocations":1,"location":{"column":5,"line":113},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 for non-existent notification"},{"ancestorTitles":["Notification API","DELETE /api/v1/notifications/:id"],"duration":398,"failureDetails":[],"failureMessages":[],"fullName":"Notification API DELETE /api/v1/notifications/:id should return 401 without authentication","invocations":1,"location":{"column":5,"line":122},"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 401 without authentication"},{"ancestorTitles":["Notification API","Notification Types"],"duration":397,"failureDetails":[],"failureMessages":[],"fullName":"Notification API Notification Types should handle gig_application notifications","invocations":1,"location":{"column":5,"line":129},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle gig_application notifications"},{"ancestorTitles":["Notification API","Notification Types"],"duration":422,"failureDetails":[],"failureMessages":[],"fullName":"Notification API Notification Types should handle new_message notifications","invocations":1,"location":{"column":5,"line":145},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle new_message notifications"},{"ancestorTitles":["Notification API","Notification Types"],"duration":395,"failureDetails":[],"failureMessages":[],"fullName":"Notification API Notification Types should handle payment notifications","invocations":1,"location":{"column":5,"line":161},"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle payment notifications"}],"endTime":1750531794568,"message":"","name":"D:\\Code\\Gygg\\gygg-platform\\backend\\tests\\notification.test.js","startTime":1750531787178,"status":"passed","summary":""}],"wasInterrupted":false}
